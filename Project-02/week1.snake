import pandas

sample_csv = pandas.read_csv('full-sample_sheet.csv', index_col='name')
CONDITIONS = set(sample_csv['condition'].tolist())
REPS = set(sample_csv['replicate'].tolist())

rule all:
    input:
        expand('results/fastqc/{condition}_{rep}_fastqc.zip', condition=CONDITIONS, rep=REPS),
        expand('results/trimmed/{condition}_{rep}_trimmed.fastq.gz', condition=CONDITIONS, rep=REPS),
        'results/genome.1.bt2'

rule wget_files:
	output:
		'samples/{condition}_{rep}.fastq.gz'
	params:
		link = lambda wildcards: sample_csv.loc['{}_{}'.format(wildcards.condition, wildcards.rep), 'ftp_link'],
		renamed = lambda wildcards: 'samples/{}_{}.fastq.gz'.format(wildcards.condition, wildcards.rep)
	shell:
		'''
		wget -O {params.renamed} {params.link} 
		'''

rule bowtie2_build_gencode:
    input:
        'results/GRCh38.primary_assembly.genome.fa.gz'
    output:
        'results/genome.1.bt2'
    params:
        prefix='results/genome'
    threads: 16
    conda:
        'envs/bowtie2_env.yml'
    shell:
        'bowtie2-build {input} {params.prefix}'

rule fastqc:
    input:
        'samples/{condition}_{rep}.fastq.gz'
    output:
        'results/fastqc/{condition}_{rep}_fastqc.zip'
    params:
        outdir='results/fastqc'
    threads: 4
    conda:
        'envs/fastqc_env.yml'
    shell:
        'fastqc -t {threads} -o {params.outdir} {input}'

rule trimmomatic:
    input:
        'samples/{condition}_{rep}.fastq.gz'
    output:
        'results/trimmed/{condition}_{rep}_trimmed.fastq.gz'
    params:
        adapters='results/TruSeq3-SE.fa',
        outdir='results/trimmed'
    threads: 8
    conda:
        'envs/trimmomatic_env.yml'
    shell:
        'trimmomatic SE {input} {output} ILLUMINACLIP:{params.adapters}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15'
